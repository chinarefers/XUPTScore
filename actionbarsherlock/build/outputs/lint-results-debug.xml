<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 25.1.7">

    <issue
        id="MissingSuperCall"
        severity="Error"
        message="Overriding method should call `super.onInitializeAccessibilityEvent`"
        category="Correctness"
        priority="9"
        summary="Missing Super Call"
        explanation="Some methods, such as `View#onDetachedFromWindow`, require that you also call the super implementation as part of your method."
        errorLine1="    public void onInitializeAccessibilityEvent(AccessibilityEvent event) {"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/internal/widget/ActionBarContextView.java"
            line="504"
            column="17"/>
    </issue>

    <issue
        id="MissingSuperCall"
        severity="Error"
        message="Overriding method should call `super.onFinishInflate`"
        category="Correctness"
        priority="9"
        summary="Missing Super Call"
        explanation="Some methods, such as `View#onDetachedFromWindow`, require that you also call the super implementation as part of your method."
        errorLine1="        protected void onFinishInflate() {"
        errorLine2="                       ~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/internal/widget/ActionBarView.java"
            line="1234"
            column="24"/>
    </issue>

    <issue
        id="MissingSuperCall"
        severity="Error"
        message="Overriding method should call `super.onFinishInflate`"
        category="Correctness"
        priority="9"
        summary="Missing Super Call"
        explanation="Some methods, such as `View#onDetachedFromWindow`, require that you also call the super implementation as part of your method."
        errorLine1="    public void onFinishInflate() {"
        errorLine2="                ~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/internal/view/menu/ActionMenuItemView.java"
            line="110"
            column="17"/>
    </issue>

    <issue
        id="CommitTransaction"
        severity="Warning"
        message="This transaction should be completed with a `commit()` call"
        category="Correctness"
        priority="7"
        summary="Missing `commit()` calls"
        explanation="After creating a `FragmentTransaction`, you typically need to commit it as well"
        errorLine1="            trans = ((FragmentActivity) mActivity).getSupportFragmentManager().beginTransaction()"
        errorLine2="                                                                               ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/internal/app/ActionBarImpl.java"
            line="535"
            column="80"/>
    </issue>

    <issue
        id="CommitTransaction"
        severity="Warning"
        message="This transaction should be completed with a `commit()` call"
        category="Correctness"
        priority="7"
        summary="Missing `commit()` calls"
        explanation="After creating a `FragmentTransaction`, you typically need to commit it as well"
        errorLine1="                    trans = ((FragmentActivity) mActivity).getSupportFragmentManager().beginTransaction()"
        errorLine2="                                                                                       ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="434"
            column="88"/>
    </issue>

    <issue
        id="CommitTransaction"
        severity="Warning"
        message="This transaction should be completed with a `commit()` call"
        category="Correctness"
        priority="7"
        summary="Missing `commit()` calls"
        explanation="After creating a `FragmentTransaction`, you typically need to commit it as well"
        errorLine1="                    mFragmentTransaction = ((FragmentActivity) mActivity).getSupportFragmentManager().beginTransaction()"
        errorLine2="                                                                                                      ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="451"
            column="103"/>
    </issue>

    <issue
        id="CommitTransaction"
        severity="Warning"
        message="This transaction should be completed with a `commit()` call"
        category="Correctness"
        priority="7"
        summary="Missing `commit()` calls"
        explanation="After creating a `FragmentTransaction`, you typically need to commit it as well"
        errorLine1="                    trans = ((FragmentActivity) mActivity).getSupportFragmentManager().beginTransaction()"
        errorLine2="                                                                                       ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/internal/app/ActionBarWrapper.java"
            line="471"
            column="88"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toUpperCase(Locale)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    setText(text.toString().toUpperCase());"
        errorLine2="                                            ~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/internal/widget/CapitalizingButton.java"
            line="37"
            column="45"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toUpperCase(Locale)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                setText(text.toString().toUpperCase());"
        errorLine2="                                        ~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/internal/widget/CapitalizingButton.java"
            line="40"
            column="41"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toUpperCase(Locale)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    setText(text.toString().toUpperCase());"
        errorLine2="                                            ~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/internal/widget/CapitalizingTextView.java"
            line="41"
            column="45"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toUpperCase(Locale)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                setText(text.toString().toUpperCase());"
        errorLine2="                                        ~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/internal/widget/CapitalizingTextView.java"
            line="44"
            column="41"/>
    </issue>

    <issue
        id="InconsistentLayout"
        severity="Warning"
        message="The id &quot;abs__split_action_bar&quot; in layout &quot;abs__screen_action_bar&quot; is missing from the following layout configurations: layout-xlarge (present in layout)"
        category="Correctness"
        priority="6"
        summary="Inconsistent Layouts"
        explanation="This check ensures that a layout resource which is defined in multiple resource folders, specifies the same set of widgets.

This finds cases where you have accidentally forgotten to add a widget to all variations of the layout, which could result in a runtime crash for some resource configurations when a `findViewById()` fails.

There *are* cases where this is intentional. For example, you may have a dedicated large tablet layout which adds some extra widgets that are not present in the phone version of the layout. As long as the code accessing the layout resource is careful to handle this properly, it is valid. In that case, you can suppress this lint check for the given extra or missing views, or the whole layout"
        errorLine1="            android:id=&quot;@+id/abs__split_action_bar&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__screen_action_bar.xml"
            line="52"
            column="13"/>
    </issue>

    <issue
        id="InconsistentLayout"
        severity="Warning"
        message="The id &quot;abs__split_action_bar&quot; in layout &quot;abs__screen_action_bar_overlay&quot; is missing from the following layout configurations: layout-xlarge (present in layout)"
        category="Correctness"
        priority="6"
        summary="Inconsistent Layouts"
        explanation="This check ensures that a layout resource which is defined in multiple resource folders, specifies the same set of widgets.

This finds cases where you have accidentally forgotten to add a widget to all variations of the layout, which could result in a runtime crash for some resource configurations when a `findViewById()` fails.

There *are* cases where this is intentional. For example, you may have a dedicated large tablet layout which adds some extra widgets that are not present in the phone version of the layout. As long as the code accessing the layout resource is careful to handle this properly, it is valid. In that case, you can suppress this lint check for the given extra or missing views, or the whole layout"
        errorLine1="    &lt;com.actionbarsherlock.internal.widget.ActionBarContainer android:id=&quot;@+id/abs__split_action_bar&quot;"
        errorLine2="                                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__screen_action_bar_overlay.xml"
            line="53"
            column="63"/>
    </issue>

    <issue
        id="MissingPrefix"
        severity="Error"
        message="Attribute is missing the Android namespace prefix"
        category="Correctness"
        priority="6"
        summary="Missing Android XML namespace"
        explanation="Most Android views have attributes in the Android namespace. When referencing these attributes you *must* include the namespace prefix, or your attribute will be interpreted by `aapt` as just a custom attribute.

Similarly, in manifest files, nearly all attributes should be in the `android:` namespace."
        errorLine1="    &lt;stroke android:width=&quot;2dp&quot; color=&quot;#A00080FF&quot;/>"
        errorLine2="                                ~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/drawable/abs__search_dropdown_dark.xml"
            line="19"
            column="33"/>
    </issue>

    <issue
        id="MissingPrefix"
        severity="Error"
        message="Attribute is missing the Android namespace prefix"
        category="Correctness"
        priority="6"
        summary="Missing Android XML namespace"
        explanation="Most Android views have attributes in the Android namespace. When referencing these attributes you *must* include the namespace prefix, or your attribute will be interpreted by `aapt` as just a custom attribute.

Similarly, in manifest files, nearly all attributes should be in the `android:` namespace."
        errorLine1="    &lt;stroke android:width=&quot;1dp&quot; color=&quot;#A00080FF&quot;/>"
        errorLine2="                                ~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/drawable/abs__search_dropdown_light.xml"
            line="19"
            column="33"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 14): `new android.widget.LinearLayout.LayoutParams`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            super((LinearLayout.LayoutParams) other);"
        errorLine2="            ~~~~~"
        quickfix="studio,adt">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/internal/view/menu/ActionMenuView.java"
            line="561"
            column="13"/>
    </issue>

    <issue
        id="OldTargetApi"
        severity="Warning"
        message="Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the `android.os.Build.VERSION_CODES` javadoc for details."
        category="Correctness"
        priority="6"
        summary="Target SDK attribute is not targeting latest version"
        explanation="When your application runs on a version of Android that is more recent than your `targetSdkVersion` specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the `targetSdkVersion` is less than 14, your app may get an option button in the UI.

To fix this issue, set the `targetSdkVersion` to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        url="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        urls="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        errorLine1="            android:targetSdkVersion=&quot;17&quot;/>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/AndroidManifest.xml"
            line="8"
            column="13"/>
    </issue>

    <issue
        id="OldTargetApi"
        severity="Warning"
        message="Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details."
        category="Correctness"
        priority="6"
        summary="Target SDK attribute is not targeting latest version"
        explanation="When your application runs on a version of Android that is more recent than your `targetSdkVersion` specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the `targetSdkVersion` is less than 14, your app may get an option button in the UI.

To fix this issue, set the `targetSdkVersion` to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        url="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        urls="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        errorLine1="        targetSdkVersion 22"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/build.gradle"
            line="9"
            column="9"/>
    </issue>

    <issue
        id="Registered"
        severity="Warning"
        message="The `&lt;activity> com.actionbarsherlock.app.SherlockFragmentActivity` is not registered in the manifest"
        category="Correctness"
        priority="6"
        summary="Class is not registered in the manifest"
        explanation="Activities, services and content providers should be registered in the `AndroidManifest.xml` file using `&lt;activity>`, `&lt;service>` and `&lt;provider>` tags.

If your activity is simply a parent class intended to be subclassed by other &quot;real&quot; activities, make it an abstract class."
        url="http://developer.android.com/guide/topics/manifest/manifest-intro.html"
        urls="http://developer.android.com/guide/topics/manifest/manifest-intro.html"
        errorLine1="public class SherlockFragmentActivity extends Watson implements OnActionModeStartedListener, OnActionModeFinishedListener {"
        errorLine2="             ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/app/SherlockFragmentActivity.java"
            line="23"
            column="14"/>
    </issue>

    <issue
        id="WrongCall"
        severity="Fatal"
        message="Suspicious method call; should probably call &quot;`layout`&quot; rather than &quot;`onLayout`&quot;"
        category="Correctness"
        priority="6"
        summary="Using wrong draw/layout method"
        explanation="Custom views typically need to call `measure()` on their children, not `onMeasure`. Ditto for onDraw, onLayout, etc."
        errorLine1="                this.onLayout(false, getLeft(), getTop(), getRight(), getBottom());"
        errorLine2="                     ~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/internal/widget/IcsAdapterView.java"
            line="593"
            column="22"/>
    </issue>

    <issue
        id="LongLogTag"
        severity="Error"
        message="The logging tag can be at most 23 characters, was 24 (SherlockFragmentActivity)"
        category="Correctness"
        priority="5"
        summary="Too Long Log Tags"
        explanation="Log tags are only allowed to be at most 23 tag characters long."
        errorLine1="        if (BuildConfig.DEBUG) Log.d(TAG, &quot;[getSupportMenuInflater]&quot;);"
        errorLine2="                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/app/SherlockFragmentActivity.java"
            line="145"
            column="32"/>
    </issue>

    <issue
        id="LongLogTag"
        severity="Error"
        message="The logging tag can be at most 23 characters, was 24 (SherlockFragmentActivity)"
        category="Correctness"
        priority="5"
        summary="Too Long Log Tags"
        explanation="Log tags are only allowed to be at most 23 tag characters long."
        errorLine1="        if (BuildConfig.DEBUG) Log.d(TAG, &quot;[invalidateOptionsMenu]&quot;);"
        errorLine2="                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/app/SherlockFragmentActivity.java"
            line="151"
            column="32"/>
    </issue>

    <issue
        id="LongLogTag"
        severity="Error"
        message="The logging tag can be at most 23 characters, was 24 (SherlockFragmentActivity)"
        category="Correctness"
        priority="5"
        summary="Too Long Log Tags"
        explanation="Log tags are only allowed to be at most 23 tag characters long."
        errorLine1="        if (BuildConfig.DEBUG) Log.d(TAG, &quot;[supportInvalidateOptionsMenu]&quot;);"
        errorLine2="                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/app/SherlockFragmentActivity.java"
            line="157"
            column="32"/>
    </issue>

    <issue
        id="LongLogTag"
        severity="Error"
        message="The logging tag can be at most 23 characters, was 24 (SherlockFragmentActivity)"
        category="Correctness"
        priority="5"
        summary="Too Long Log Tags"
        explanation="Log tags are only allowed to be at most 23 tag characters long."
        errorLine1="        if (BuildConfig.DEBUG) Log.d(TAG, &quot;[onCreatePanelMenu] featureId: &quot; + featureId + &quot;, menu: &quot; + menu);"
        errorLine2="                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/app/SherlockFragmentActivity.java"
            line="164"
            column="32"/>
    </issue>

    <issue
        id="LongLogTag"
        severity="Error"
        message="The logging tag can be at most 23 characters, was 24 (SherlockFragmentActivity)"
        category="Correctness"
        priority="5"
        summary="Too Long Log Tags"
        explanation="Log tags are only allowed to be at most 23 tag characters long."
        errorLine1="            if (BuildConfig.DEBUG) Log.d(TAG, &quot;[onCreatePanelMenu] returning &quot; + result);"
        errorLine2="                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/app/SherlockFragmentActivity.java"
            line="171"
            column="36"/>
    </issue>

    <issue
        id="LongLogTag"
        severity="Error"
        message="The logging tag can be at most 23 characters, was 24 (SherlockFragmentActivity)"
        category="Correctness"
        priority="5"
        summary="Too Long Log Tags"
        explanation="Log tags are only allowed to be at most 23 tag characters long."
        errorLine1="            Log.d(TAG, &quot;[onPreparePanel] featureId: &quot; + featureId + &quot;, view: &quot; + view + &quot;, menu: &quot; + menu);"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/app/SherlockFragmentActivity.java"
            line="185"
            column="13"/>
    </issue>

    <issue
        id="LongLogTag"
        severity="Error"
        message="The logging tag can be at most 23 characters, was 24 (SherlockFragmentActivity)"
        category="Correctness"
        priority="5"
        summary="Too Long Log Tags"
        explanation="Log tags are only allowed to be at most 23 tag characters long."
        errorLine1="            if (BuildConfig.DEBUG) Log.d(TAG, &quot;[onPreparePanel] returning &quot; + result);"
        errorLine2="                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/app/SherlockFragmentActivity.java"
            line="192"
            column="36"/>
    </issue>

    <issue
        id="LongLogTag"
        severity="Error"
        message="The logging tag can be at most 23 characters, was 24 (SherlockFragmentActivity)"
        category="Correctness"
        priority="5"
        summary="Too Long Log Tags"
        explanation="Log tags are only allowed to be at most 23 tag characters long."
        errorLine1="        if (BuildConfig.DEBUG) Log.d(TAG, &quot;[onMenuItemSelected] featureId: &quot; + featureId + &quot;, item: &quot; + item);"
        errorLine2="                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/app/SherlockFragmentActivity.java"
            line="205"
            column="32"/>
    </issue>

    <issue
        id="LongLogTag"
        severity="Error"
        message="The logging tag can be at most 23 characters, was 24 (SherlockFragmentActivity)"
        category="Correctness"
        priority="5"
        summary="Too Long Log Tags"
        explanation="Log tags are only allowed to be at most 23 tag characters long."
        errorLine1="            if (BuildConfig.DEBUG) Log.d(TAG, &quot;[onMenuItemSelected] returning &quot; + result);"
        errorLine2="                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/app/SherlockFragmentActivity.java"
            line="212"
            column="36"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="The targetSdkVersion (22) should not be higher than the compileSdkVersion (21)"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    compileSdkVersion 21"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/build.gradle"
            line="4"
            column="5"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="Old buildToolsVersion 22.0.0; recommended version is 22.0.1 or later"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    buildToolsVersion &quot;22.0.0&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/build.gradle"
            line="5"
            column="5"/>
    </issue>

    <issue
        id="GradleOverrides"
        severity="Warning"
        message="This `versionCode` value (`1`) is not used; it is always overridden by the value specified in the Gradle build script (`1`)"
        category="Correctness"
        priority="4"
        summary="Value overridden by Gradle build script"
        explanation="The value of (for example) `minSdkVersion` is only used if it is not specified in the `build.gradle` build scripts. When specified in the Gradle build scripts, the manifest value is ignored and can be misleading, so should be removed to avoid ambiguity."
        errorLine1="          android:versionCode=&quot;1&quot;"
        errorLine2="          ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/AndroidManifest.xml"
            line="3"
            column="11"/>
    </issue>

    <issue
        id="GradleOverrides"
        severity="Warning"
        message="This `versionName` value (`1.0`) is not used; it is always overridden by the value specified in the Gradle build script (`1.0`)"
        category="Correctness"
        priority="4"
        summary="Value overridden by Gradle build script"
        explanation="The value of (for example) `minSdkVersion` is only used if it is not specified in the `build.gradle` build scripts. When specified in the Gradle build scripts, the manifest value is ignored and can be misleading, so should be removed to avoid ambiguity."
        errorLine1="          android:versionName=&quot;1.0&quot;>"
        errorLine2="          ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/AndroidManifest.xml"
            line="4"
            column="11"/>
    </issue>

    <issue
        id="GradleOverrides"
        severity="Warning"
        message="This `minSdkVersion` value (`7`) is not used; it is always overridden by the value specified in the Gradle build script (`14`)"
        category="Correctness"
        priority="4"
        summary="Value overridden by Gradle build script"
        explanation="The value of (for example) `minSdkVersion` is only used if it is not specified in the `build.gradle` build scripts. When specified in the Gradle build scripts, the manifest value is ignored and can be misleading, so should be removed to avoid ambiguity."
        errorLine1="            android:minSdkVersion=&quot;7&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/AndroidManifest.xml"
            line="7"
            column="13"/>
    </issue>

    <issue
        id="GradleOverrides"
        severity="Warning"
        message="This `targetSdkVersion` value (`17`) is not used; it is always overridden by the value specified in the Gradle build script (`22`)"
        category="Correctness"
        priority="4"
        summary="Value overridden by Gradle build script"
        explanation="The value of (for example) `minSdkVersion` is only used if it is not specified in the `build.gradle` build scripts. When specified in the Gradle build scripts, the manifest value is ignored and can be misleading, so should be removed to avoid ambiguity."
        errorLine1="            android:targetSdkVersion=&quot;17&quot;/>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/AndroidManifest.xml"
            line="8"
            column="13"/>
    </issue>

    <issue
        id="WrongConstant"
        severity="Error"
        message="Must be one of: Toast.LENGTH_SHORT, Toast.LENGTH_LONG"
        category="Security"
        priority="6"
        summary="Incorrect constant"
        explanation="Ensures that when parameter in a method only allows a specific set of constants, calls obey those rules."
        errorLine1="        Toast cheatSheet = IcsToast.makeText(context, mItemData.getTitle(), IcsToast.LENGTH_SHORT);"
        errorLine2="                                                                            ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/internal/view/menu/ActionMenuItemView.java"
            line="266"
            column="77"/>
    </issue>

    <issue
        id="ObsoleteLayoutParam"
        severity="Warning"
        message="Invalid layout param in a `FrameLayout`: `layout_alignParentTop`"
        category="Performance"
        priority="6"
        summary="Obsolete layout params"
        explanation="The given layout_param is not defined for the given layout, meaning it has no effect. This usually happens when you change the parent layout or move view code around without updating the layout params. This will cause useless attribute processing at runtime, and is misleading for others reading the layout so the parameter should be removed."
        errorLine1="                                                              android:layout_alignParentTop=&quot;true&quot;"
        errorLine2="                                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__screen_action_bar_overlay.xml"
            line="33"
            column="63"/>
    </issue>

    <issue
        id="ObsoleteLayoutParam"
        severity="Warning"
        message="Invalid layout param in a `FrameLayout`: `layout_below`"
        category="Performance"
        priority="6"
        summary="Obsolete layout params"
        explanation="The given layout_param is not defined for the given layout, meaning it has no effect. This usually happens when you change the parent layout or move view code around without updating the layout params. This will cause useless attribute processing at runtime, and is misleading for others reading the layout so the parameter should be removed."
        errorLine1="               android:layout_below=&quot;@id/abs__action_bar_container&quot;/>"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__screen_action_bar_overlay.xml"
            line="52"
            column="16"/>
    </issue>

    <issue
        id="UseCompoundDrawables"
        severity="Warning"
        message="This tag and its children can be replaced by one `&lt;TextView/>` and a compound drawable"
        category="Performance"
        priority="6"
        summary="Node can be replaced by a `TextView` with compound drawables"
        explanation="A `LinearLayout` which contains an `ImageView` and a `TextView` can be more efficiently handled as a compound drawable (a single TextView, using the `drawableTop`, `drawableLeft`, `drawableRight` and/or `drawableBottom` attributes to draw one or more images adjacent to the text).

If the two widgets are offset from each other with margins, this can be replaced with a `drawablePadding` attribute.

There&apos;s a lint quickfix to perform this conversion in the Eclipse plugin."
        errorLine1="    &lt;LinearLayout"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__activity_chooser_view_list_item.xml"
            line="27"
            column="5"/>
    </issue>

    <issue
        id="FloatMath"
        severity="Warning"
        message="Use `java.lang.Math#floor` instead of `android.util.FloatMath#floor()` since it is faster as of API 8"
        category="Performance"
        priority="3"
        summary="Using `FloatMath` instead of `Math`"
        explanation="In older versions of Android, using `android.util.FloatMath` was recommended for performance reasons when operating on floats. However, on modern hardware doubles are just as fast as float (though they take more memory), and in recent versions of Android, `FloatMath` is actually slower than using `java.lang.Math` due to the way the JIT optimizes `java.lang.Math`. Therefore, you should use `Math` instead of `FloatMath` if you are only targeting Froyo and above."
        url="http://developer.android.com/guide/practices/design/performance.html#avoidfloat"
        urls="http://developer.android.com/guide/practices/design/performance.html#avoidfloat"
        errorLine1="                (int) FloatMath.floor(after.left),"
        errorLine2="                      ~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/internal/nineoldandroids/view/animation/AnimatorProxy.java"
            line="160"
            column="23"/>
    </issue>

    <issue
        id="FloatMath"
        severity="Warning"
        message="Use `java.lang.Math#floor` instead of `android.util.FloatMath#floor()` since it is faster as of API 8"
        category="Performance"
        priority="3"
        summary="Using `FloatMath` instead of `Math`"
        explanation="In older versions of Android, using `android.util.FloatMath` was recommended for performance reasons when operating on floats. However, on modern hardware doubles are just as fast as float (though they take more memory), and in recent versions of Android, `FloatMath` is actually slower than using `java.lang.Math` due to the way the JIT optimizes `java.lang.Math`. Therefore, you should use `Math` instead of `FloatMath` if you are only targeting Froyo and above."
        url="http://developer.android.com/guide/practices/design/performance.html#avoidfloat"
        urls="http://developer.android.com/guide/practices/design/performance.html#avoidfloat"
        errorLine1="                (int) FloatMath.floor(after.top),"
        errorLine2="                      ~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/internal/nineoldandroids/view/animation/AnimatorProxy.java"
            line="161"
            column="23"/>
    </issue>

    <issue
        id="FloatMath"
        severity="Warning"
        message="Use `java.lang.Math#ceil` instead of `android.util.FloatMath#ceil()` since it is faster as of API 8"
        category="Performance"
        priority="3"
        summary="Using `FloatMath` instead of `Math`"
        explanation="In older versions of Android, using `android.util.FloatMath` was recommended for performance reasons when operating on floats. However, on modern hardware doubles are just as fast as float (though they take more memory), and in recent versions of Android, `FloatMath` is actually slower than using `java.lang.Math` due to the way the JIT optimizes `java.lang.Math`. Therefore, you should use `Math` instead of `FloatMath` if you are only targeting Froyo and above."
        url="http://developer.android.com/guide/practices/design/performance.html#avoidfloat"
        urls="http://developer.android.com/guide/practices/design/performance.html#avoidfloat"
        errorLine1="                (int) FloatMath.ceil(after.right),"
        errorLine2="                      ~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/internal/nineoldandroids/view/animation/AnimatorProxy.java"
            line="162"
            column="23"/>
    </issue>

    <issue
        id="FloatMath"
        severity="Warning"
        message="Use `java.lang.Math#ceil` instead of `android.util.FloatMath#ceil()` since it is faster as of API 8"
        category="Performance"
        priority="3"
        summary="Using `FloatMath` instead of `Math`"
        explanation="In older versions of Android, using `android.util.FloatMath` was recommended for performance reasons when operating on floats. However, on modern hardware doubles are just as fast as float (though they take more memory), and in recent versions of Android, `FloatMath` is actually slower than using `java.lang.Math` due to the way the JIT optimizes `java.lang.Math`. Therefore, you should use `Math` instead of `FloatMath` if you are only targeting Froyo and above."
        url="http://developer.android.com/guide/practices/design/performance.html#avoidfloat"
        urls="http://developer.android.com/guide/practices/design/performance.html#avoidfloat"
        errorLine1="                (int) FloatMath.ceil(after.bottom));"
        errorLine2="                      ~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/internal/nineoldandroids/view/animation/AnimatorProxy.java"
            line="163"
            column="23"/>
    </issue>

    <issue
        id="InefficientWeight"
        severity="Warning"
        message="Use a `layout_width` of `0dp` instead of `wrap_content` for better performance"
        category="Performance"
        priority="3"
        summary="Inefficient layout weight"
        explanation="When only a single widget in a LinearLayout defines a weight, it is more efficient to assign a width/height of `0dp` to it since it will absorb all the remaining space anyway. With a declared width/height of `0dp` it does not have to measure its own size first."
        errorLine1="            android:layout_width=&quot;wrap_content&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__search_view.xml"
            line="53"
            column="13"/>
    </issue>

    <issue
        id="InefficientWeight"
        severity="Warning"
        message="Use a `layout_width` of `0dp` instead of `wrap_content` for better performance"
        category="Performance"
        priority="3"
        summary="Inefficient layout weight"
        explanation="When only a single widget in a LinearLayout defines a weight, it is more efficient to assign a width/height of `0dp` to it since it will absorb all the remaining space anyway. With a declared width/height of `0dp` it does not have to measure its own size first."
        errorLine1="                android:layout_width=&quot;wrap_content&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__search_view.xml"
            line="77"
            column="17"/>
    </issue>

    <issue
        id="NestedWeights"
        severity="Warning"
        message="Nested weights are bad for performance"
        category="Performance"
        priority="3"
        summary="Nested layout weights"
        explanation="Layout weights require a widget to be measured twice. When a LinearLayout with non-zero weights is nested inside another LinearLayout with non-zero weights, then the number of measurements increase exponentially."
        errorLine1="                android:layout_weight=&quot;1&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__search_view.xml"
            line="79"
            column="17"/>
    </issue>

    <issue
        id="NestedWeights"
        severity="Warning"
        message="Nested weights are bad for performance"
        category="Performance"
        priority="3"
        summary="Nested layout weights"
        explanation="Layout weights require a widget to be measured twice. When a LinearLayout with non-zero weights is nested inside another LinearLayout with non-zero weights, then the number of measurements increase exponentially."
        errorLine1="                  android:layout_weight=&quot;1&quot;"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__search_view.xml"
            line="89"
            column="19"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `?attr/actionBarItemBackground` with a theme that also paints a background (inferred theme is `@android:style/Theme.Holo`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.

NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.

If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.

Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead.
"
        errorLine1="      android:background=&quot;?attr/actionBarItemBackground&quot;"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__action_bar_home.xml"
            line="21"
            column="7"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.abs__ab_transparent_dark_holo` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/drawable-hdpi/abs__ab_transparent_dark_holo.9.png"/>
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/drawable-mdpi/abs__ab_transparent_dark_holo.9.png"/>
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/drawable-xhdpi/abs__ab_transparent_dark_holo.9.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.abs__ab_transparent_light_holo` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/drawable-hdpi/abs__ab_transparent_light_holo.9.png"/>
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/drawable-mdpi/abs__ab_transparent_light_holo.9.png"/>
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/drawable-xhdpi/abs__ab_transparent_light_holo.9.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.dimen.abs__dialog_min_width_major` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;item type=&quot;dimen&quot; name=&quot;abs__dialog_min_width_major&quot;>45%&lt;/item>"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/values-xlarge/abs__dimens.xml"
            line="40"
            column="24"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.dimen.abs__dialog_min_width_minor` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;item type=&quot;dimen&quot; name=&quot;abs__dialog_min_width_minor&quot;>72%&lt;/item>"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/values-xlarge/abs__dimens.xml"
            line="44"
            column="24"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.layout.sherlock_spinner_dropdown_item` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="&lt;TextView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;"
        errorLine2="^">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/sherlock_spinner_dropdown_item.xml"
            line="20"
            column="1"/>
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout-v14/sherlock_spinner_dropdown_item.xml"
            line="20"
            column="1"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.layout.sherlock_spinner_item` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="&lt;TextView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;"
        errorLine2="^">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/sherlock_spinner_item.xml"
            line="20"
            column="1"/>
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout-v14/sherlock_spinner_item.xml"
            line="20"
            column="1"/>
    </issue>

    <issue
        id="UselessParent"
        severity="Warning"
        message="This `LinearLayout` layout or its `LinearLayout` parent is useless; transfer the `background` attribute to the other view"
        category="Performance"
        priority="2"
        summary="Useless parent layout"
        explanation="A layout with children that has no siblings, is not a scrollview or a root layout, and does not have a background, can be removed and have its children moved directly into the parent for a flatter and more efficient layout hierarchy."
        errorLine1="    &lt;LinearLayout"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__activity_chooser_view_list_item.xml"
            line="27"
            column="5"/>
    </issue>

    <issue
        id="TypographyEllipsis"
        severity="Warning"
        message="Replace &quot;...&quot; with ellipsis character (…, &amp;#8230;) ?"
        category="Usability:Typography"
        priority="5"
        summary="Ellipsis string can be replaced with ellipsis character"
        explanation="You can replace the string &quot;...&quot; with a dedicated ellipsis character, ellipsis character (…, &amp;#8230;). This can help make the text more readable."
        url="http://en.wikipedia.org/wiki/Ellipsis"
        urls="http://en.wikipedia.org/wiki/Ellipsis"
        errorLine1="    &lt;string name=&quot;abs__activity_chooser_view_see_all&quot;>See all...&lt;/string>"
        errorLine2="                                                      ^"
        quickfix="studio,adt">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/values/abs__strings.xml"
            line="31"
            column="55"/>
    </issue>

    <issue
        id="IconDuplicatesConfig"
        severity="Warning"
        message="The `abs__list_divider_holo_dark.9.png` icon has identical contents in the following configuration folders: drawable-hdpi, drawable-mdpi"
        category="Usability:Icons"
        priority="5"
        summary="Identical bitmaps across various configurations"
        explanation="If an icon is provided under different configuration parameters such as `drawable-hdpi` or `-v11`, they should typically be different. This detector catches cases where the same icon is provided in different configuration folder which is usually not intentional.">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/drawable-mdpi/abs__list_divider_holo_dark.9.png"/>
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/drawable-hdpi/abs__list_divider_holo_dark.9.png"/>
    </issue>

    <issue
        id="IconDuplicatesConfig"
        severity="Warning"
        message="The `abs__list_divider_holo_light.9.png` icon has identical contents in the following configuration folders: drawable-hdpi, drawable-mdpi"
        category="Usability:Icons"
        priority="5"
        summary="Identical bitmaps across various configurations"
        explanation="If an icon is provided under different configuration parameters such as `drawable-hdpi` or `-v11`, they should typically be different. This detector catches cases where the same icon is provided in different configuration folder which is usually not intentional.">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/drawable-mdpi/abs__list_divider_holo_light.9.png"/>
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/drawable-hdpi/abs__list_divider_holo_light.9.png"/>
    </issue>

    <issue
        id="IconDensities"
        severity="Warning"
        message="Missing the following drawables in `drawable-xhdpi`: abs__ic_clear_normal.png (found in drawable-mdpi, drawable-hdpi)"
        category="Usability:Icons"
        priority="4"
        summary="Icon densities validation"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra high). This lint check identifies icons which do not have complete coverage across the densities.

Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/drawable-xhdpi"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__list_activated_holo.9.png, abs__list_longpressed_holo.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/drawable-hdpi/abs__list_longpressed_holo.9.png"/>
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/drawable-hdpi/abs__list_activated_holo.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__list_pressed_holo_dark.9.png, abs__list_pressed_holo_light.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/drawable-hdpi/abs__list_pressed_holo_light.9.png"/>
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/drawable-hdpi/abs__list_pressed_holo_dark.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__progress_primary_holo_dark.9.png, abs__progress_primary_holo_light.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/drawable-hdpi/abs__progress_primary_holo_light.9.png"/>
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/drawable-hdpi/abs__progress_primary_holo_dark.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__progress_secondary_holo_dark.9.png, abs__progress_secondary_holo_light.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/drawable-hdpi/abs__progress_secondary_holo_light.9.png"/>
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/drawable-hdpi/abs__progress_secondary_holo_dark.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__textfield_search_right_selected_holo_dark.9.png, abs__textfield_search_right_selected_holo_light.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/drawable-mdpi/abs__textfield_search_right_selected_holo_light.9.png"/>
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/drawable-mdpi/abs__textfield_search_right_selected_holo_dark.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: abs__textfield_search_selected_holo_dark.9.png, abs__textfield_search_selected_holo_light.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/drawable-mdpi/abs__textfield_search_selected_holo_light.9.png"/>
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/drawable-mdpi/abs__textfield_search_selected_holo_dark.9.png"/>
    </issue>

    <issue
        id="IconMissingDensityFolder"
        severity="Warning"
        message="Missing density variation folders in `src/main/res`: drawable-xxhdpi, drawable-xxxhdpi"
        category="Usability:Icons"
        priority="3"
        summary="Missing density folder"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra-high, extra-extra-high). This lint check identifies folders which are missing, such as `drawable-hdpi`.

Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res"/>
    </issue>

    <issue
        id="ViewConstructor"
        severity="Warning"
        message="Custom view `CollapsibleActionViewWrapper` is missing constructor used by tools: `(Context)` or `(Context,AttributeSet)` or `(Context,AttributeSet,int)`"
        category="Usability"
        priority="3"
        summary="Missing View constructors for XML inflation"
        explanation="Some layout tools (such as the Android layout editor for Studio &amp; Eclipse) needs to find a constructor with one of the following signatures:
* `View(Context context)`
* `View(Context context, AttributeSet attrs)`
* `View(Context context, AttributeSet attrs, int defStyle)`

If your custom view needs to perform initialization which does not apply when used in a layout editor, you can surround the given code with a check to see if `View#isInEditMode()` is false, since that method will return `false` at runtime but true within a user interface editor."
        errorLine1="public class CollapsibleActionViewWrapper extends FrameLayout implements android.view.CollapsibleActionView {"
        errorLine2="             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/internal/widget/CollapsibleActionViewWrapper.java"
            line="11"
            column="14"/>
    </issue>

    <issue
        id="ViewConstructor"
        severity="Warning"
        message="Custom view `DropDownListView` is missing constructor used by tools: `(Context)` or `(Context,AttributeSet)` or `(Context,AttributeSet,int)`"
        category="Usability"
        priority="3"
        summary="Missing View constructors for XML inflation"
        explanation="Some layout tools (such as the Android layout editor for Studio &amp; Eclipse) needs to find a constructor with one of the following signatures:
* `View(Context context)`
* `View(Context context, AttributeSet attrs)`
* `View(Context context, AttributeSet attrs, int defStyle)`

If your custom view needs to perform initialization which does not apply when used in a layout editor, you can surround the given code with a check to see if `View#isInEditMode()` is false, since that method will return `false` at runtime but true within a user interface editor."
        errorLine1="    private static class DropDownListView extends ListView {"
        errorLine2="                         ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/internal/widget/IcsListPopupWindow.java"
            line="514"
            column="26"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="`com/actionbarsherlock/internal/widget/IcsListPopupWindow$PopupTouchInterceptor#onTouch` should call `View#performClick` when a click is detected"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="        public boolean onTouch(View v, MotionEvent event) {"
        errorLine2="                       ~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/internal/widget/IcsListPopupWindow.java"
            line="619"
            column="24"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView android:id=&quot;@id/abs__up&quot;"
        errorLine2="    ^"
        quickfix="studio,adt">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__action_bar_home.xml"
            line="24"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView android:id=&quot;@id/abs__home&quot;"
        errorLine2="    ^"
        quickfix="studio,adt">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__action_bar_home.xml"
            line="31"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView android:id=&quot;@id/abs__up&quot;"
        errorLine2="    ^"
        quickfix="studio,adt">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__action_bar_title_item.xml"
            line="25"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageButton android:id=&quot;@+id/abs__imageButton&quot;"
        errorLine2="    ^"
        quickfix="studio,adt">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__action_menu_item_layout.xml"
            line="27"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView android:layout_width=&quot;48dip&quot;"
        errorLine2="    ^"
        quickfix="studio,adt">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout-large/abs__action_mode_close_item.xml"
            line="27"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="        &lt;ImageView"
        errorLine2="        ^"
        quickfix="studio,adt">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__activity_chooser_view.xml"
            line="35"
            column="9"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="        &lt;ImageView"
        errorLine2="        ^"
        quickfix="studio,adt">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__activity_chooser_view.xml"
            line="57"
            column="9"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="        &lt;ImageView"
        errorLine2="        ^"
        quickfix="studio,adt">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__activity_chooser_view_list_item.xml"
            line="32"
            column="9"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="&lt;ImageView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;"
        errorLine2="^"
        quickfix="studio,adt">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__list_menu_item_icon.xml"
            line="17"
            column="1"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView android:src=&quot;?attr/windowContentOverlay&quot;"
        errorLine2="    ^"
        quickfix="studio,adt">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout-xlarge/abs__screen_action_bar_overlay.xml"
            line="45"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView android:src=&quot;?attr/windowContentOverlay&quot;"
        errorLine2="    ^"
        quickfix="studio,adt">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__screen_action_bar_overlay.xml"
            line="48"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView android:id=&quot;@android:id/icon1&quot;"
        errorLine2="    ^"
        quickfix="studio,adt">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__search_dropdown_item_icons_2line.xml"
            line="29"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView android:id=&quot;@+id/edit_query&quot;"
        errorLine2="    ^"
        quickfix="studio,adt">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__search_dropdown_item_icons_2line.xml"
            line="38"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView android:id=&quot;@android:id/icon2&quot;"
        errorLine2="    ^"
        quickfix="studio,adt">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__search_dropdown_item_icons_2line.xml"
            line="49"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="        &lt;ImageView"
        errorLine2="        ^"
        quickfix="studio,adt">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__search_view.xml"
            line="63"
            column="9"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Warning"
        message="When you define `paddingRight` you should probably also define `paddingLeft` for right-to-left symmetry"
        category="Internationalization:Bidirectional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="              android:paddingRight=&quot;16dip&quot;"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__action_bar_title_item.xml"
            line="21"
            column="15"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Warning"
        message="When you define `paddingLeft` you should probably also define `paddingRight` for right-to-left symmetry"
        category="Internationalization:Bidirectional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="        android:paddingLeft=&quot;8dip&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout-large/abs__action_mode_close_item.xml"
            line="22"
            column="9"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Warning"
        message="When you define `paddingRight` you should probably also define `paddingLeft` for right-to-left symmetry"
        category="Internationalization:Bidirectional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="                                                           android:paddingRight=&quot;16dip&quot;>"
        errorLine2="                                                           ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__popup_menu_item_layout.xml"
            line="21"
            column="60"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                @ViewDebug.IntToString(from = Gravity.LEFT, to = &quot;LEFT&quot;),"
        errorLine2="                                                      ~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/app/ActionBar.java"
            line="903"
            column="55"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                @ViewDebug.IntToString(from = Gravity.RIGHT, to = &quot;RIGHT&quot;),"
        errorLine2="                                                      ~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/app/ActionBar.java"
            line="904"
            column="55"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            this.gravity = Gravity.CENTER_VERTICAL | Gravity.LEFT;"
        errorLine2="                                                             ~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/app/ActionBar.java"
            line="924"
            column="62"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="    private static final int DEFAULT_CUSTOM_GRAVITY = Gravity.LEFT | Gravity.CENTER_VERTICAL;"
        errorLine2="                                                              ~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/internal/widget/ActionBarView.java"
            line="84"
            column="63"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                    hgravity = Gravity.LEFT;"
        errorLine2="                                       ~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/internal/widget/ActionBarView.java"
            line="1055"
            column="40"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                    hgravity = Gravity.RIGHT;"
        errorLine2="                                       ~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/internal/widget/ActionBarView.java"
            line="1057"
            column="40"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                hgravity = Gravity.LEFT;"
        errorLine2="                                   ~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/internal/widget/ActionBarView.java"
            line="1060"
            column="36"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                case Gravity.LEFT:"
        errorLine2="                             ~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/internal/widget/ActionBarView.java"
            line="1068"
            column="30"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                case Gravity.RIGHT:"
        errorLine2="                             ~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/internal/widget/ActionBarView.java"
            line="1071"
            column="30"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            cheatSheet.setGravity(Gravity.TOP | Gravity.RIGHT,"
        errorLine2="                                                        ~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/internal/view/menu/ActionMenuItemView.java"
            line="269"
            column="57"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            return (clip) ? new ClipDrawable(shapeDrawable, Gravity.LEFT,"
        errorLine2="                                                                    ~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/internal/widget/IcsProgressBar.java"
            line="388"
            column="69"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                gravity |= Gravity.LEFT;"
        errorLine2="                                   ~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/internal/widget/IcsSpinner.java"
            line="161"
            column="36"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            case Gravity.RIGHT:"
        errorLine2="                         ~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/internal/widget/IcsSpinner.java"
            line="283"
            column="26"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);"
        errorLine2="                                   ~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/java/com/actionbarsherlock/internal/widget/ScrollingTabContainerView.java"
            line="377"
            column="36"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`start`&quot; instead of &quot;`left`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="               android:layout_gravity=&quot;center_vertical|left&quot;"
        errorLine2="                                       ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__action_bar_home.xml"
            line="26"
            column="40"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_marginEnd=&quot;-8dip&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="               android:layout_marginRight=&quot;-8dip&quot;/>"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__action_bar_home.xml"
            line="30"
            column="16"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_marginEnd=&quot;8dip&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="               android:layout_marginRight=&quot;8dip&quot;"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__action_bar_home.xml"
            line="34"
            column="16"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:paddingEnd=&quot;16dip&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="              android:paddingRight=&quot;16dip&quot;"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__action_bar_title_item.xml"
            line="21"
            column="15"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`start`&quot; instead of &quot;`left`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="               android:layout_gravity=&quot;center_vertical|left&quot;"
        errorLine2="                                       ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__action_bar_title_item.xml"
            line="27"
            column="40"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`start`&quot; instead of &quot;`left`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                  android:layout_gravity=&quot;center_vertical|left&quot;"
        errorLine2="                                          ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__action_bar_title_item.xml"
            line="34"
            column="43"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:paddingStart=&quot;8dip&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:paddingLeft=&quot;8dip&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout-large/abs__action_mode_close_item.xml"
            line="22"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_marginEnd=&quot;16dip&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_marginRight=&quot;16dip&quot;>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout-large/abs__action_mode_close_item.xml"
            line="26"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_marginStart=&quot;4dip&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="              android:layout_marginLeft=&quot;4dip&quot;"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout-large/abs__action_mode_close_item.xml"
            line="35"
            column="15"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_marginEnd=&quot;16dip&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="              android:layout_marginRight=&quot;16dip&quot;"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout-large/abs__action_mode_close_item.xml"
            line="36"
            column="15"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_marginEnd=&quot;8dip&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                android:layout_marginRight=&quot;8dip&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__activity_chooser_view_list_item.xml"
            line="37"
            column="17"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_marginStart=&quot;8dip&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="           android:layout_marginLeft=&quot;8dip&quot;"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__list_menu_item_icon.xml"
            line="22"
            column="12"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_marginEnd=&quot;-8dip&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="           android:layout_marginRight=&quot;-8dip&quot;"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__list_menu_item_icon.xml"
            line="23"
            column="12"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:paddingEnd=&quot;16dip&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                                                           android:paddingRight=&quot;16dip&quot;>"
        errorLine2="                                                           ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__popup_menu_item_layout.xml"
            line="21"
            column="60"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_marginStart=&quot;16dip&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:layout_marginLeft=&quot;16dip&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__popup_menu_item_layout.xml"
            line="31"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_alignParentStart=&quot;true&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                android:layout_alignParentLeft=&quot;true&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__popup_menu_item_layout.xml"
            line="39"
            column="17"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_alignParentStart=&quot;true&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                android:layout_alignParentLeft=&quot;true&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__popup_menu_item_layout.xml"
            line="51"
            column="17"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:paddingStart=&quot;@dimen/abs__dropdownitem_text_padding_left&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                android:paddingLeft=&quot;@dimen/abs__dropdownitem_text_padding_left&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__search_dropdown_item_icons_2line.xml"
            line="22"
            column="17"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:paddingEnd=&quot;4dip&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                android:paddingRight=&quot;4dip&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__search_dropdown_item_icons_2line.xml"
            line="23"
            column="17"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_alignParentStart=&quot;true&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="               android:layout_alignParentLeft=&quot;true&quot;"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__search_dropdown_item_icons_2line.xml"
            line="33"
            column="16"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_alignParentEnd=&quot;true&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="               android:layout_alignParentRight=&quot;true&quot;"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__search_dropdown_item_icons_2line.xml"
            line="42"
            column="16"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_toStartOf=&quot;@id/edit_query&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="               android:layout_toLeftOf=&quot;@id/edit_query&quot;"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__search_dropdown_item_icons_2line.xml"
            line="54"
            column="16"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_toEndOf=&quot;@android:id/icon1&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="              android:layout_toRightOf=&quot;@android:id/icon1&quot;"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__search_dropdown_item_icons_2line.xml"
            line="70"
            column="15"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_toStartOf=&quot;@android:id/icon2&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="              android:layout_toLeftOf=&quot;@android:id/icon2&quot;"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__search_dropdown_item_icons_2line.xml"
            line="71"
            column="15"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_toEndOf=&quot;@android:id/icon1&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="              android:layout_toRightOf=&quot;@android:id/icon1&quot;"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__search_dropdown_item_icons_2line.xml"
            line="85"
            column="15"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_toStartOf=&quot;@android:id/icon2&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="              android:layout_toLeftOf=&quot;@android:id/icon2&quot;"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__search_dropdown_item_icons_2line.xml"
            line="86"
            column="15"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_marginStart=&quot;@dimen/abs__dropdownitem_text_padding_left&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                android:layout_marginLeft=&quot;@dimen/abs__dropdownitem_text_padding_left&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__search_view.xml"
            line="68"
            column="17"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:paddingStart=&quot;@dimen/abs__dropdownitem_text_padding_left&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                  android:paddingLeft=&quot;@dimen/abs__dropdownitem_text_padding_left&quot;"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__search_view.xml"
            line="92"
            column="19"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:paddingEnd=&quot;@dimen/abs__dropdownitem_text_padding_right&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                  android:paddingRight=&quot;@dimen/abs__dropdownitem_text_padding_right&quot;"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/xiyoumc/dev/github/西邮成绩/actionbarsherlock/src/main/res/layout/abs__search_view.xml"
            line="93"
            column="19"/>
    </issue>

</issues>
